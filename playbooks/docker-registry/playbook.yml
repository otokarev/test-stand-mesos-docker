---
- hosts: docker-registry1
#  remote_user: root
  sudo: true
  vars:
    domain: hui.boom
    host_ip: 192.168.2.4
    certs_dir: /root/certs
    server_key_path: /root/certs/key.pem
    server_cert_path: /root/certs/cert.pem
    host_url: tcp://192.168.2.4:2376
  tasks:
    - name: Set VPS hostname
      hostname: name={{domain}}
    - name: Make VPS to know about domainname (modify /etc/hosts)
      lineinfile: dest=/etc/hosts regexp=' {{domain}}$' line='{{host_ip}} {{domain}}'
    - name: It's useful to have public key on VPS
      authorized_key:
        user: root
        key:  "{{ lookup('file', '/home/otokarev/.ssh/id_rsa.pub') }}"
    - name: It's useful to have public key on VPS
      authorized_key:
        user: vagrant
        key:  "{{ lookup('file', '/home/otokarev/.ssh/id_rsa.pub') }}"
    - name: yum update
      command: yum update -y
    - name: Add docker.repo
      template: src=docker.repo dest=/etc/yum.repos.d/docker.repo
    - name: Install required RPMs
      yum: name={{item}} state=present
      with_items:
        - telnet
        - net-tools
        - bind-utils
        - docker-engine
        - python-docker-py
    - file: name=/etc/systemd/system/docker.service.d state=directory
    - name: Add Docker daemon config
      template: src=docker.conf dest=/etc/systemd/system/docker.service.d/docker.conf
    - name: Make docker-daemon to lounch on boot
      command: chkconfig docker on

    #
    # Generate SSL a key and a certificate. The certificate must be signed
    # with Test CA
    #
    # Create manually CA key/cert
    # cd certs
    # openssl req -subj '/CN={{domain}}/O=My Test Registry LTD./C=US' -newkey rsa:4096 -nodes -sha256 -keyout certs/ca-key.pem -days 365 -x509 -out certs/ca-cert.pem
    #
    - file: name={{certs_dir}} state=directory
    - copy: src=certs/ dest={{certs_dir}}
    - shell: cp {{certs_dir}}/ca-cert.pem {{certs_dir}}/ca.pem
    - name: Generate CSR
      shell: openssl req -subj '/CN={{domain}}/O=My Company Name LTD./C=US' -newkey rsa:4096 -nodes -sha256 -keyout {{certs_dir}}/key.pem -days 365 -out {{certs_dir}}/cert.csr
    - name: Sign CSR, create cert
      shell: openssl req -subj '/CN={{domain}}/O=My Company Name LTD./C=US' -newkey rsa:4096 -nodes -sha256 -keyout {{certs_dir}}/key.pem -days 365 -out {{certs_dir}}/cert.csr
      shell: openssl x509 -req -in {{certs_dir}}/cert.csr -CA {{certs_dir}}/ca-cert.pem -CAkey {{certs_dir}}/ca-key.pem -CAcreateserial -out {{certs_dir}}/cert.pem -days 365
    - fetch: src={{certs_dir}}/cert.pem dest=/tmp/cert.tmp flat=true
    - set_fact:
        cert_pem: "{{ lookup('file', '/tmp/cert.tmp') }}"

    #
    # Make VPS system know about test CA root certificate
    # (CentOS specific)
    #
    - copy: src=certs/ca-cert.pem dest=/etc/pki/ca-trust/source/anchors/docker-test-registry.crt
    - shell: update-ca-trust
    - file: name=/etc/docker/certs.d/{{domain}}/ state=directory
    - copy:  dest=/etc/docker/certs.d/{{domain}}/ca.crt src=certs/ca-cert.pem
    - service: name=docker state=restarted

    #
    # Make local system know about test CA root certificate
    # (Ubuntu specific)
    #
    - local_action: copy  dest=/usr/local/share/ca-certificates/docker-test-registry.crt src=certs/ca-cert.pem
    - local_action: command update-ca-certificates
    - local_action: file name=/etc/docker/certs.d/{{domain}}:5000/ state=directory
    - local_action: copy  dest=/etc/docker/certs.d/{{domain}}:5000/ca.crt src=certs/ca-cert.pem
    - local_action: service name=docker state=restarted

    - docker: name=registry state=absent image=registry:2
    - name: Start Docker container
      docker:
        name: registry
        image: registry:2
        restart_policy: always
        ports:
        - "5000:5000"
        volumes:
        - "{{certs_dir}}:/certs"
        env:
          REGISTRY_HTTP_TLS_CERTIFICATE: /certs/cert.pem
          REGISTRY_HTTP_TLS_KEY: /certs/key.pem
      tags:
        - docker
